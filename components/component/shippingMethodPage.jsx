/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/xid9xtw1a4y
 */
import { Country, State, City } from "country-state-city";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import Image from "next/image";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectItem,
  SelectGroup,
  SelectContent,
} from "../ui/select";
import { useContext, useEffect, useState } from "react";
import {
  addShippingClassToOrder,
  addShippingToOrder,
} from "@/lib/operations/operations-woocommerce";
import { CartContext } from "@/lib/context/cartContext";
import { useRouter } from "next/router";
import CartCheckoutTotal from "./cart-checkout-total";
import { Card, CardContent, CardHeader, CardTitle } from "../ui/card";
import { RadioGroup, RadioGroupItem } from "../ui/radio-group";
import { Currency } from "./currency";

export function ShippingMethodPage() {
  const { orderId, cart, setCart } = useContext(CartContext);
  const router = useRouter();
  const [shippingClass, setShippingClass] = useState({
    key: "shipping_class",
    value: "hardware",
  });

  useEffect(() => {
    if (cart) {
      if (cart.meta_data) {
        if (cart.meta_data.length) {
          const furler_shipping = cart.meta_data.find(
            (item) => item.value === "furler"
          );
          if (!furler_shipping) {
            const hardware_shipping = cart.meta_data.find(
              (item) => item.value === "hardware"
            );
            setShippingClass(hardware_shipping);
          } else {
            setShippingClass(furler_shipping);
          }
        }
      }
    }
  }, [cart]);

  const handleShippingClassSubmit = async (e) => {
    e.preventDefault();
    if (shippingClass) {
      try {
        if (cart.meta_data.length > 0) {
          const find = cart.meta_data.find(
            (item) => item.value === shippingClass.value
          );
          if (cart.shipping_lines.length > 0 && find) {
            router.push({ pathname: `/checkout/payment`, query: { orderId } });
          }
          if (cart.shipping_lines.length > 0 && !find) {
            const response = await addShippingClassToOrder(
              orderId,
              shippingClass
            );
            // await swell.init(swellConfig.storeId, swellConfig.publicKey);
            // const response = await swell.cart.update({
            //   shipping: shipping,
            // });
            if (!response.success) {
              throw new Error(`Invalid response: ${response.status}`);
            }
            setCart(response.data);
            router.push({ pathname: `/checkout/payment`, query: { orderId } });
          }
          if (find) {
            // router.push({ pathname: `/checkout/payment`, query: { orderId } });
            const response = await addShippingClassToOrder(
              orderId,
              shippingClass
            );
            // await swell.init(swellConfig.storeId, swellConfig.publicKey);
            // const response = await swell.cart.update({
            //   shipping: shipping,
            // });
            if (!response.success) {
              throw new Error(`Invalid response: ${response.status}`);
            }
            setCart(response.data);
            router.push({ pathname: `/checkout/payment`, query: { orderId } });
          }
        } else {
          const response = await addShippingClassToOrder(
            orderId,
            shippingClass
          );
          // await swell.init(swellConfig.storeId, swellConfig.publicKey);
          // const response = await swell.cart.update({
          //   shipping: shipping,
          // });
          if (!response.success) {
            throw new Error(`Invalid response: ${response.status}`);
          }
          setCart(response.data);
          router.push({ pathname: `/checkout/payment`, query: { orderId } });
        }
      } catch (err) {
        console.error(err);
        alert(
          "We can't submit the form, please review your answers and try again."
        );
      }
    } else {
      setErrors(validationMessages);
    }
  };
  return (
    <div className="mx-auto max-w-5xl space-y-6 border-2 border-gray-200 shadow-lg p-4 rounded-md my-8">
      <div className="lg:grid lg:grid-cols-2 gap-4 flex flex-col ">
        <form className="" onSubmit={handleShippingClassSubmit}>
          <Card>
            <CardHeader>
              <CardTitle>Shipping Method</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="mb-4 text-gray-500 ">
                Please note: Shipping cost is based on the size of the product.
              </p>
              <RadioGroup defaultValue="flatrate">
                <Label
                  className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-500 "
                  htmlFor="flatrate"
                >
                  <RadioGroupItem id="flatrate" value="flatrate" />
                  Flat Rate Shipping - 5-7 Business Days - $
                  {shippingClass.value === "hardware"
                    ? (35.0).toFixed(2)
                    : (150.0).toFixed(2)}
                </Label>
              </RadioGroup>
            </CardContent>
          </Card>
          <Card className="my-6">
            <CardHeader>
              <CardTitle>Shipping Class</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="mb-4 text-gray-500 ">
                The type of shipping class is determined by the size and weight
                of the product.
              </p>
              <ul className="list-disc list-inside text-gray-500 ">
                <li>
                  <span
                    className={
                      shippingClass.value === "hardware" ? "font-bold" : ""
                    }
                  >
                    Hardware and Parts
                  </span>{" "}
                  - For products related to hardware components and parts
                </li>
                <li>
                  <span
                    className={
                      shippingClass.value === "furler" ? "font-bold" : ""
                    }
                  >
                    Furler
                  </span>{" "}
                  - For products related to furling systems
                </li>
              </ul>
            </CardContent>
          </Card>
          <Card className="my-6">
            <CardHeader>
              <CardTitle>Currency</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="mb-4 text-gray-500 ">
                Select the currency you wish to be charged in. Conversion is
                approximate, PayPal may charge you a different amount.
              </p>
              <Currency />
            </CardContent>
          </Card>
          <Button className="w-full" type="submit">
            Accept Shipping
          </Button>
        </form>
        <CartCheckoutTotal cart={!cart ? null : cart} />
      </div>
    </div>
  );
}
