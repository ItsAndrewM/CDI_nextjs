/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/Z9CCE48wfPP
 */
import { Button } from "@/components/ui/button";
import {
  CardTitle,
  CardDescription,
  CardHeader,
  CardContent,
  Card,
} from "@/components/ui/card";
import { CartContext } from "@/lib/context/cartContext";

import { useContext } from "react";
import CartCard from "./cart-card";
import { useRouter } from "next/router";

export function CartSidebar({ dialogRef }) {
  const { cart, orderId } = useContext(CartContext);
  const router = useRouter();

  return (
    // <div className="grid min-h-screen w-full lg:grid-cols-[280px_1fr]">
    // <div className="hidden border-r bg-gray-100/40 lg:block dark:bg-gray-800/40">
    <dialog
      ref={dialogRef}
      open={false}
      className="fixed right-full top-0 min-h-screen z-10 w-80 border-r sm:h-screen "
    >
      <div className="flex h-[60px] items-center border-b px-6">
        <Button
          className="ml-auto h-8 w-8"
          size="icon"
          variant="outline"
          onClick={() => dialogRef.current.close()}
        >
          <Cross />
          <span className="sr-only">close cart</span>
        </Button>
      </div>
      {!cart ? (
        <div className="flex-1 py-2">
          <div className="grid items-start px-4 text-sm font-medium">
            <div className="flex items-center gap-3 px-3 py-2 text-gray-500 ">
              <PackageIcon className="" />
              <span className="font-semibold">Your Cart</span>
            </div>
            <div className="flex items-center justify-center h-full">
              <div className="text-center">
                <ShoppingCartIcon className="h-16 w-16 text-gray-400 " />
                <p className="mt-4 text-gray-500 ">
                  Your cart is currently empty.
                </p>
              </div>
            </div>
          </div>
        </div>
      ) : (
        <>
          <div className="flex-1 overflow-auto py-2">
            <div className="grid items-start px-4 text-sm font-medium max-h-[550px] overflow-y-scroll">
              <div className="flex items-center gap-3 rounded-lg px-3 py-2 text-gray-500  ">
                {/* <ShoppingCartIcon /> */}
                <span className="font-semibold">Your Cart</span>
              </div>
              {!cart.line_items.length ? (
                <div className="flex-1 py-2">
                  <div className="grid items-start px-4 text-sm font-medium">
                    <div className="flex items-center justify-center h-full">
                      <div className="text-center">
                        {/* <ShoppingCartIcon className="h-16 w-16 text-gray-400 " /> */}
                        <p className="mt-4 text-gray-500 ">
                          Your cart is currently empty.
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                cart.line_items.map((item) => {
                  return <CartCard product={item} key={item.id} />;
                })
              )}
            </div>
          </div>
        </>
      )}
      <div className="mt-auto p-4 absolute bottom-0 w-full">
        {!cart ? null : (
          <Card>
            <CardHeader className="pb-4">
              <CardTitle>Total</CardTitle>
              {!cart.total_tax ? null : (
                <CardDescription>
                  {Number(cart.total_tax) > 0
                    ? `Tax: ${cart.currency_symbol} ${cart.total_tax}`
                    : null}
                </CardDescription>
              )}
              {!cart.currency_symbol || cart.total === "0.00" ? null : (
                <CardDescription>
                  Total: {cart.currency_symbol} {Number(cart.total)}
                </CardDescription>
              )}
            </CardHeader>
            <CardContent>
              <Button
                className="w-full bg-cdiBlue text-white hover:bg-cdiLightBlue hover:text-black"
                variant="solid"
                size="sm"
                onClick={() => {
                  router.push({
                    pathname: "/checkout",
                    query: { orderId },
                  });
                }}
              >
                Checkout
              </Button>
            </CardContent>
          </Card>
        )}
      </div>
    </dialog>
    // </div>
    // </div>
  );
}

function ShoppingCartIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="8" cy="21" r="1" />
      <circle cx="19" cy="21" r="1" />
      <path d="M2.05 2.05h2l2.66 12.42a2 2 0 1.58h9.78a2 1.95-1.57l1.65-7.43H5.12" />
    </svg>
  );
}

const Cross = ({ ...props }) => {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6L6 18" />
      <path d="M6 6l12 12" />
    </svg>
  );
};

function PackageIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m7.5 4.27 9 5.15" />
      <path d="M21 8a2 2 0 0-1-1.73l-7-4a2 0-2 0l-7 4A2 3 8v8a2 1 1.73l7 4a2 0l7-4A2 21 16Z" />
      <path d="m3.3 7 8.7 5 8.7-5" />
      <path d="M12 22V12" />
    </svg>
  );
}
